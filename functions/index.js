const functions = require("firebase-functions")
const admin = require("firebase-admin")
const algoliasearch = require("algoliasearch")

const APP_ID = functions.config().algolia.app
const ADMIN_KEY = functions.config().algolia.key

const client = algoliasearch(APP_ID, ADMIN_KEY)
const index = client.initIndex("rentals")

const express = require("express")
const app = express()

//DURING DEPLOYMENT
// admin.initializeApp()

// DURING LOCAL TESTING
const serviceAccountkey = require("../serviceAccount.json")
admin.initializeApp({
  credential: admin.credential.cert(serviceAccountkey),
  databaseURL: "https://tolet-app-bd.firebaseio.com",
})
//ALGOLIA ADD INDEX ON FIRESTORE DOCUMENT CREATE
exports.addToIndex = functions.firestore
  .document("rentals/{rentalID}")
  .onCreate((snapshot) => {
    const data = snapshot.data()
    const objectID = snapshot.id

    return index.saveObject({ ...data, objectID })
  })

//ALGOLIA UPDATE INDEX ON FIRESTORE DOCUMENT UPDATE
exports.updateIndex = functions.firestore
  .document("rentals/{rentalID}")
  .onUpdate((change) => {
    const newData = change.after.data()
    const objectID = change.after.id

    return index.saveObject({ ...newData, objectID })
  })

//ALGOLIA DELETE INDEX ON FIRESTORE DOCUMENT DELETE
exports.deleteIndex = functions.firestore
  .document("rentals/{rentalID}")
  .onDelete((snapshot) => {
    index.deleteObject(snapshot.id)
  })

// GET ALL RENTALS (FOR SPECIFIC USER or ALL => SEE API DOCS) ORDERED BY LATEST
app.get("/get-all-rentals/", (req, res) => {
  let dbref = admin
    .firestore()
    .collection(`/rentals`)
    .orderBy("createdAt", "desc")

  const userID = req.query.userID

  if (userID) {
    dbref = dbref.where("userID", "==", userID)
  }

  dbref
    .get()
    .then((data) => {
      let rentals = []

      data.forEach((doc) => {
        rentals.push({
          rentalID: doc.id,
          userID: doc.data().userID,
          title: doc.data().title,
          bedrooms: doc.data().bedrooms,
          description: doc.data().description,
          kitchen: doc.data().kitchen,
          size_sqft: doc.data().size_sqft,
          address: doc.data().address,
          washrooms: doc.data().washrooms,
          createdAt: doc.data().createdAt,
          rent: doc.data().rent,
        })
      })

      return res.json(rentals)
    })
    .catch((err) => res.send(err))
})

//CREATE RENTAL FOR A SPECIFIC USER USING USER ID GENERATED BY FIREBASE
app.post("/create-rental", (req, res) => {
  const newRental = {
    userID: req.body.userID,
    title: req.body.title,
    description: req.body.description,
    bedrooms: req.body.bedrooms,
    kitchen: req.body.kitchen,
    washrooms: req.body.washrooms,
    diningrooms: req.body.diningrooms,
    rent: req.body.rent,
    size_sqft: req.body.size_sqft,
    address: req.body.address,
    createdAt: new Date().toISOString(),
  }

  admin
    .firestore()
    .collection(`/rentals`)
    .add(newRental)
    .then((doc) => {
      res.send({ message: `document ${doc.id} created successfully` })
    })
    .catch((err) => {
      res.status(500).json({ error: "something went wrong" })
      console.log(err)
    })
})

app.post("/remove-rental", (req, res) => {
  const removeRental = {
    userID: req.body.userID,
    rentalID: req.body.rentalID,
  }

  admin
    .firestore()
    .collection("/rentals")
    .where("rentalID", "==", removeRental.rentalID)
    .get()
    .then((querySnapshot) => {
      querySnapshot.forEach((documentSnapshot) => {
        documentSnapshot.ref.delete()
      })
    })
    .catch((err) => res.send({ error: `Error ${err}` }))
})

exports.api = functions.https.onRequest(app)
